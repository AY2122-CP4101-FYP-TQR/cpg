// Generated proto file. DO NOT EDIT
syntax = "proto3";
package cpg_tree;

option java_package = "de.fraunhofer.aisec.cpg.frontends.grpc.messages";
option java_multiple_files = true;
option go_package = "github.com/Fraunhofer-AISEC/cpg-rpc/proto;proto";

message TypeResolverTypeStateValue {
  repeated NodeIndex TypeResolverTypeStateValue = 1;
}

message TypeResolverTypeState {
  NodeIndex key = 1;
  TypeResolverTypeStateValue value = 2;
}

message TypeResolver {
  repeated NodeIndex firstOrderTypes = 1;
  repeated TypeResolverTypeState typeState = 2;
}

message Pass {
  oneof Pass {
    TypeResolver TypeResolver = 1;
    TypeHierarchyResolver TypeHierarchyResolver = 2;
    FilenameMapper FilenameMapper = 3;
    CallResolver CallResolver = 4;
    ControlFlowSensitiveDFGPass ControlFlowSensitiveDFGPass = 5;
    ImportResolver ImportResolver = 6;
    JavaExternalTypeHierarchyResolver JavaExternalTypeHierarchyResolver = 7;
    VariableUsageResolver VariableUsageResolver = 8;
    EvaluationOrderGraphPass EvaluationOrderGraphPass = 9;
  }
}

message TypeHierarchyResolver {
  map<string, NodeIndex> recordMap = 1;
  repeated NodeIndex enums = 2;
}

message FilenameMapper {
}

message CallResolverContainingType {
  NodeIndex key = 1;
  NodeIndex value = 2;
}

message CallResolver {
  map<string, NodeIndex> recordMap = 1;
  repeated NodeIndex templateList = 2;
  repeated CallResolverContainingType containingType = 3;
  NodeIndex currentTU = 4;
  ScopedWalker walker = 5;
}

message ControlFlowSensitiveDFGPass {
}

message ImportResolver {
  repeated NodeIndex records = 1;
  map<string, NodeIndex> importables = 2;
}

message JavaExternalTypeHierarchyResolver {
}

message VariableUsageResolverSuperTypesMapValue {
  repeated NodeIndex VariableUsageResolverSuperTypesMapValue = 1;
}

message VariableUsageResolverSuperTypesMap {
  NodeIndex key = 1;
  VariableUsageResolverSuperTypesMapValue value = 2;
}

message VariableUsageResolverRecordMap {
  NodeIndex key = 1;
  NodeIndex value = 2;
}

message VariableUsageResolverEnumMap {
  NodeIndex key = 1;
  NodeIndex value = 2;
}

message VariableUsageResolver {
  repeated VariableUsageResolverSuperTypesMap superTypesMap = 1;
  repeated VariableUsageResolverRecordMap recordMap = 2;
  repeated VariableUsageResolverEnumMap enumMap = 3;
  NodeIndex currTu = 4;
  ScopedWalker walker = 5;
}

message EvaluationOrderGraphPassMap {
  CallableInterface value = 1;
}

message EvaluationOrderGraphPass {
  repeated EvaluationOrderGraphPassMap map = 1;
  repeated NodeIndex currentEOG = 2;
  repeated NodeIndex intermediateNodes = 3;
}

message TranslationResult {
  TranslationManager translationManager = 1;
  repeated NodeIndex translationUnits = 2;
}

message Node {
  oneof Node {
    TranslationResult TranslationResult = 1;
    Annotation Annotation = 2;
    Statement Statement = 3;
    AnnotationMember AnnotationMember = 4;
    Declaration Declaration = 5;
    Type Type = 6;
  }
  string name = 7;
  string code = 8;
  string comment = 9;
  PhysicalLocation location = 10;
  string file = 11;
  repeated PropertyEdge prevEOGEdges = 12;
  repeated PropertyEdge nextEOGEdges = 13;
  repeated NodeIndex prevEOG = 14;
  repeated NodeIndex nextEOG = 15;
  repeated NodeIndex prevDFG = 16;
  repeated NodeIndex nextDFG = 17;
  repeated NodeIndex typedefs = 18;
  bool isDummy = 19;
  bool isImplicit = 20;
  int32 argumentIndex = 21;
  repeated NodeIndex annotations = 22;
}

message Region {
  int32 startLine = 1;
  int32 startColumn = 2;
  int32 endLine = 3;
  int32 endColumn = 4;
}

message ArtifactLocation {
}

message PhysicalLocation {
  ArtifactLocation artifactLocation = 1;
  Region region = 2;
}

message CallableInterface {
}

message TranslationManager {
  TranslationConfiguration config = 1;
}

message TranslationConfigurationFrontendsValue {
  repeated string TranslationConfigurationFrontendsValue = 1;
}

message TranslationConfigurationFrontends {
  TranslationConfigurationFrontendsValue value = 1;
}

message TranslationConfiguration {
  bool debugParser = 1;
  bool loadIncludes = 2;
  repeated string includePaths = 3;
  repeated string includeWhitelist = 4;
  repeated string includeBlacklist = 5;
  repeated TranslationConfigurationFrontends frontends = 6;
  bool disableCleanup = 7;
  bool codeInNodes = 8;
  bool processAnnotations = 9;
  bool failOnError = 10;
  map<string, string> symbols = 11;
  bool useUnityBuild = 12;
  repeated Pass passes = 13;
}

message TriConsumer {
}

message IterativeGraphWalker {
  repeated NodeIndex todo = 1;
  repeated NodeIndex backlog = 2;
}

message ScopedWalkerNodeToParentBlockAndContainedValueDeclarations {
  NodeIndex key = 1;
}

message ScopedWalker {
  repeated ScopedWalkerNodeToParentBlockAndContainedValueDeclarations nodeToParentBlockAndContainedValueDeclarations = 1;
  repeated NodeIndex currentClass = 2;
  IterativeGraphWalker walker = 3;
  repeated TriConsumer handlers = 4;
}

message TypeListener {
  oneof TypeListener {
    ConstructExpression ConstructExpression = 1;
  }
}

enum AccessValues {
  READ = 0;
  WRITE = 1;
  READWRITE = 2;
}

message Annotation {
  repeated NodeIndex members = 1;
}

message CatchClause {
  NodeIndex parameter = 1;
  NodeIndex body = 2;
}

message Statement {
  oneof Statement {
    CatchClause CatchClause = 1;
    ForStatement ForStatement = 2;
    IfStatement IfStatement = 3;
    CaseStatement CaseStatement = 4;
    SwitchStatement SwitchStatement = 5;
    DeclarationStatement DeclarationStatement = 6;
    LabelStatement LabelStatement = 7;
    Expression Expression = 8;
    EmptyStatement EmptyStatement = 9;
    ContinueStatement ContinueStatement = 10;
    BreakStatement BreakStatement = 11;
    DoStatement DoStatement = 12;
    DefaultStatement DefaultStatement = 13;
    AssertStatement AssertStatement = 14;
    CompoundStatement CompoundStatement = 15;
    ReturnStatement ReturnStatement = 16;
    ForEachStatement ForEachStatement = 17;
    TryStatement TryStatement = 18;
    SynchronizedStatement SynchronizedStatement = 19;
    GotoStatement GotoStatement = 20;
    WhileStatement WhileStatement = 21;
  }
  repeated PropertyEdge locals = 22;
}

message ForStatement {
  NodeIndex statement = 1;
  NodeIndex initializerStatement = 2;
  NodeIndex conditionDeclaration = 3;
  NodeIndex condition = 4;
  NodeIndex iterationExpression = 5;
}

message IfStatement {
  NodeIndex initializerStatement = 1;
  NodeIndex conditionDeclaration = 2;
  NodeIndex condition = 3;
  bool isConstExpression = 4;
  NodeIndex thenStatement = 5;
  NodeIndex elseStatement = 6;
}

message CaseStatement {
  NodeIndex caseExpression = 1;
}

message SwitchStatement {
  NodeIndex selector = 1;
  NodeIndex initializerStatement = 2;
  NodeIndex selectorDeclaration = 3;
  NodeIndex statement = 4;
}

message DeclarationStatement {
  oneof DeclarationStatement {
    ASMDeclarationStatement ASMDeclarationStatement = 1;
  }
  repeated PropertyEdge declarations = 2;
}

message LabelStatement {
  NodeIndex subStatement = 1;
  string label = 2;
}

message NewExpression {
  NodeIndex initializer = 1;
  repeated NodeIndex templateParameters = 2;
}

message Expression {
  oneof Expression {
    NewExpression NewExpression = 1;
    TypeIdExpression TypeIdExpression = 2;
    UninitializedValue UninitializedValue = 3;
    DesignatedInitializerExpression DesignatedInitializerExpression = 4;
    CastExpression CastExpression = 5;
    InitializerListExpression InitializerListExpression = 6;
    ArrayCreationExpression ArrayCreationExpression = 7;
    ConditionalExpression ConditionalExpression = 8;
    BinaryOperator BinaryOperator = 9;
    ArrayRangeExpression ArrayRangeExpression = 10;
    ArraySubscriptionExpression ArraySubscriptionExpression = 11;
    ExpressionList ExpressionList = 12;
    DeclaredReferenceExpression DeclaredReferenceExpression = 13;
    Literal Literal = 14;
    TypeExpression TypeExpression = 15;
    CallExpression CallExpression = 16;
    KeyValueExpression KeyValueExpression = 17;
    DeleteExpression DeleteExpression = 18;
    CompoundStatementExpression CompoundStatementExpression = 19;
    UnaryOperator UnaryOperator = 20;
  }
  NodeIndex type = 21;
  repeated TypeListener typeListeners = 22;
  repeated NodeIndex possibleSubTypes = 23;
}

message TypeIdExpression {
  NodeIndex referencedType = 1;
  string operatorCode = 2;
}

message MemberCallExpression {
  NodeIndex member = 1;
  string operatorCode = 2;
}

message CallExpression {
  oneof CallExpression {
    MemberCallExpression MemberCallExpression = 1;
    StaticCallExpression StaticCallExpression = 2;
    ConstructExpression ConstructExpression = 3;
    ExplicitConstructorInvocation ExplicitConstructorInvocation = 4;
  }
  repeated PropertyEdge invokes = 5;
  repeated PropertyEdge arguments = 6;
  NodeIndex base = 7;
  string fqn = 8;
  bool template = 9;
  repeated PropertyEdge templateParameters = 10;
  NodeIndex templateInstantiation = 11;
}

message StaticCallExpression {
  string targetRecord = 1;
}

message ConstructExpression {
}

message UninitializedValue {
}

message DesignatedInitializerExpression {
  NodeIndex rhs = 1;
  repeated PropertyEdge lhs = 2;
}

message CastExpression {
  NodeIndex expression = 1;
  NodeIndex castType = 2;
}

message InitializerListExpression {
  repeated PropertyEdge initializers = 1;
}

message ArrayCreationExpression {
  NodeIndex initializer = 1;
  repeated PropertyEdge dimensions = 2;
}

message ConditionalExpression {
  NodeIndex condition = 1;
  NodeIndex thenExpr = 2;
  NodeIndex elseExpr = 3;
}

message BinaryOperator {
  NodeIndex lhs = 1;
  NodeIndex rhs = 2;
  string operatorCode = 3;
  repeated string compoundOperators = 4;
}

message ArrayRangeExpression {
  NodeIndex floor = 1;
  NodeIndex ceiling = 2;
}

message ArraySubscriptionExpression {
  NodeIndex arrayExpression = 1;
  NodeIndex subscriptExpression = 2;
}

message ExpressionList {
  repeated PropertyEdge expressions = 1;
}

message MemberExpression {
  NodeIndex base = 1;
  string operatorCode = 2;
}

message DeclaredReferenceExpression {
  oneof DeclaredReferenceExpression {
    MemberExpression MemberExpression = 1;
  }
  NodeIndex refersTo = 2;
  AccessValues access = 3;
  bool staticAccess = 4;
}

message ExplicitConstructorInvocation {
  string containingClass = 1;
}

message Literal {
}

message TypeExpression {
}

message KeyValueExpression {
  NodeIndex key = 1;
  NodeIndex value = 2;
}

message DeleteExpression {
  NodeIndex operand = 1;
}

message CompoundStatementExpression {
  NodeIndex statement = 1;
}

message UnaryOperator {
  NodeIndex input = 1;
  string operatorCode = 2;
  bool postfix = 3;
  bool prefix = 4;
  repeated TypeListener checked = 5;
}

message EmptyStatement {
}

message ContinueStatement {
  string label = 1;
}

message BreakStatement {
  string label = 1;
}

message DoStatement {
  NodeIndex condition = 1;
  NodeIndex statement = 2;
}

message DefaultStatement {
}

message ASMDeclarationStatement {
}

message AssertStatement {
  NodeIndex condition = 1;
  NodeIndex message = 2;
}

message CompoundStatement {
  repeated PropertyEdge statements = 1;
}

message ReturnStatement {
  NodeIndex returnValue = 1;
}

message ForEachStatement {
  NodeIndex variable = 1;
  NodeIndex iterable = 2;
  NodeIndex statement = 3;
}

message TryStatement {
  repeated PropertyEdge resources = 1;
  NodeIndex tryBlock = 2;
  NodeIndex finallyBlock = 3;
  repeated PropertyEdge catchClauses = 4;
}

message SynchronizedStatement {
  NodeIndex expression = 1;
  NodeIndex blockStatement = 2;
}

message GotoStatement {
  string labelName = 1;
  NodeIndex targetLabel = 2;
}

message WhileStatement {
  NodeIndex conditionDeclaration = 1;
  NodeIndex condition = 2;
  NodeIndex statement = 3;
}

message AnnotationMember {
  NodeIndex value = 1;
}

enum Properties {
  INDEX = 0;
  BRANCH = 1;
  NAME = 2;
  INSTANTIATION = 3;
}

message PropertyEdgeProperties {
  Properties key = 1;
}

message PropertyEdge {
  NodeIndex start = 1;
  NodeIndex end = 2;
  repeated PropertyEdgeProperties properties = 3;
}

message TypedefDeclaration {
  NodeIndex type = 1;
  NodeIndex alias = 2;
}

message Declaration {
  oneof Declaration {
    TypedefDeclaration TypedefDeclaration = 1;
    EnumDeclaration EnumDeclaration = 2;
    TranslationUnitDeclaration TranslationUnitDeclaration = 3;
    TemplateDeclaration TemplateDeclaration = 4;
    DeclarationSequence DeclarationSequence = 5;
    ProblemDeclaration ProblemDeclaration = 6;
    IncludeDeclaration IncludeDeclaration = 7;
    NamespaceDeclaration NamespaceDeclaration = 8;
    UsingDirective UsingDirective = 9;
    RecordDeclaration RecordDeclaration = 10;
    ValueDeclaration ValueDeclaration = 11;
  }
}

message FieldDeclaration {
  NodeIndex initializer = 1;
  bool isDefinition = 2;
  NodeIndex definition = 3;
  bool implicitInitializerAllowed = 4;
  bool isArray = 5;
  repeated string modifiers = 6;
}

message ValueDeclaration {
  oneof ValueDeclaration {
    FieldDeclaration FieldDeclaration = 1;
    EnumConstantDeclaration EnumConstantDeclaration = 2;
    FunctionDeclaration FunctionDeclaration = 3;
    ParamVariableDeclaration ParamVariableDeclaration = 4;
    TypeParamDeclaration TypeParamDeclaration = 5;
    VariableDeclaration VariableDeclaration = 6;
  }
  NodeIndex type = 7;
  repeated NodeIndex possibleSubTypes = 8;
  repeated TypeListener typeListeners = 9;
}

message EnumConstantDeclaration {
}

message EnumDeclaration {
  repeated PropertyEdge entries = 1;
  repeated PropertyEdge superTypes = 2;
  repeated NodeIndex superTypeDeclarations = 3;
}

message ConstructorDeclaration {
}

message MethodDeclaration {
  oneof MethodDeclaration {
    ConstructorDeclaration ConstructorDeclaration = 1;
  }
  bool isStatic = 2;
  NodeIndex recordDeclaration = 3;
  NodeIndex receiver = 4;
}

message TranslationUnitDeclaration {
  repeated PropertyEdge declarations = 1;
  repeated PropertyEdge includes = 2;
  repeated PropertyEdge namespaces = 3;
}

message FunctionDeclaration {
  oneof FunctionDeclaration {
    MethodDeclaration MethodDeclaration = 1;
  }
  NodeIndex body = 2;
  repeated PropertyEdge records = 3;
  repeated PropertyEdge parameters = 4;
  repeated PropertyEdge throwsTypes = 5;
  repeated PropertyEdge overriddenBy = 6;
  repeated PropertyEdge overrides = 7;
  bool isDefinition = 8;
  NodeIndex definition = 9;
}

message TemplateDeclaration {
  oneof TemplateDeclaration {
    FunctionTemplateDeclaration FunctionTemplateDeclaration = 1;
    ClassTemplateDeclaration ClassTemplateDeclaration = 2;
  }
  repeated PropertyEdge parameters = 3;
}

message ParamVariableDeclaration {
  bool variadic = 1;
  NodeIndex defaultValue = 2;
}

message TypeParamDeclaration {
  NodeIndex defaultType = 1;
}

message DeclarationSequence {
  repeated PropertyEdge children = 1;
}

message ProblemDeclaration {
  string filename = 1;
  string problem = 2;
  string problemLocation = 3;
}

message FunctionTemplateDeclaration {
  repeated PropertyEdge realization = 1;
}

message IncludeDeclaration {
  repeated PropertyEdge includes = 1;
  repeated PropertyEdge problems = 2;
  string filename = 3;
}

message NamespaceDeclaration {
  repeated NodeIndex declarations = 1;
}

message UsingDirective {
  string qualifiedName = 1;
}

message RecordDeclaration {
  string kind = 1;
  repeated PropertyEdge fields = 2;
  repeated PropertyEdge methods = 3;
  repeated PropertyEdge constructors = 4;
  repeated PropertyEdge records = 5;
  repeated PropertyEdge templates = 6;
  repeated NodeIndex superClasses = 7;
  repeated NodeIndex implementedInterfaces = 8;
  repeated NodeIndex superTypeDeclarations = 9;
  repeated string importStatements = 10;
  repeated NodeIndex imports = 11;
  repeated string staticImportStatements = 12;
  repeated NodeIndex staticImports = 13;
}

message ClassTemplateDeclaration {
  repeated PropertyEdge realization = 1;
}

message VariableDeclaration {
  NodeIndex initializer = 1;
  repeated NodeIndex templateParameters = 2;
  bool implicitInitializerAllowed = 3;
  bool isArray = 4;
}

message UnknownType {
}

message Type {
  oneof Type {
    UnknownType UnknownType = 1;
    PointerType PointerType = 2;
    IncompleteType IncompleteType = 3;
    ReferenceType ReferenceType = 4;
    ParameterizedType ParameterizedType = 5;
    ObjectType ObjectType = 6;
    FunctionPointerType FunctionPointerType = 7;
  }
  repeated NodeIndex superTypes = 8;
  Storage storage = 9;
  bool primitive = 10;
  Qualifier qualifier = 11;
  Origin origin = 12;
}

enum PointerOrigin {
  POINTER = 0;
  ARRAY = 1;
}

message PointerType {
  NodeIndex elementType = 1;
  PointerOrigin pointerOrigin = 2;
}

message IncompleteType {
}

message ReferenceType {
  NodeIndex reference = 1;
}

message ParameterizedType {
}

enum Modifier {
  SIGNED = 0;
  UNSIGNED = 1;
  NOT_APPLICABLE = 2;
}

message ObjectType {
  Modifier modifier = 1;
  NodeIndex recordDeclaration = 2;
  repeated PropertyEdge generics = 3;
}

message FunctionPointerType {
  repeated PropertyEdge parameters = 1;
  NodeIndex returnType = 2;
}

enum Storage {
  AUTO = 0;
  EXTERN = 1;
  STATIC = 2;
  REGISTER = 3;
}

enum Origin {
  RESOLVED = 0;
  DATAFLOW = 1;
  GUESSED = 2;
  UNRESOLVED = 3;
}

message Qualifier {
  bool isConst = 1;
  bool isVolatile = 2;
  bool isRestrict = 3;
  bool isAtomic = 4;
}

message NodeIndex {
  int64 NodeIndex = 1;
}

service TransferCpg {
  rpc TransferCpg (CpgRequest) returns (CpgResponse);
}

message CpgRequest {
  string filename = 1;
}

message CpgResponse {
  NodeIndex root = 1;
  repeated Node nodes = 2;
}


