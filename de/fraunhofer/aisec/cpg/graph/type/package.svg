<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="228px" preserveAspectRatio="none" style="width:308px;height:228px;background:#000000;" version="1.1" viewBox="0 0 308 228" width="308px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="261" x="5" y="19">Dot Executable: /opt/local/bin/dot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="145" x="5" y="35.2969">File does not exist</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="291" x="5" y="51.5938">Cannot find Graphviz. You should try</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="67.8906"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="79" x="5" y="84.1875">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="57" x="5" y="100.4844">testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="72" x="5" y="116.7813">@enduml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="133.0781"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="17" x="10" y="149.375">or</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="165.6719"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="227" x="5" y="181.9688">java -jar plantuml.jar -testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="198.2656"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacingAndGlyphs" textLength="186" x="57.5" y="214.8447">UMLDoclet 2.0.9, PlantUML 1.2020.08</text><!--MD5=[97adc258ba35af341f4306a66e45478c]
@startuml
    namespace de.fraunhofer.aisec.cpg.graph.type {

        class QualifierConverter [[QualifierConverter.html]] {
            +toGraphProperties(Qualifier): Map<String, ?>
            +toEntityAttribute(Map<String, ?>): Qualifier
        }

        interface SecondOrderType [[SecondOrderType.html]]

        class UnknownType [[UnknownType.html]] {
            +UnknownType(String)
            +reference(PointerOrigin): Type
            +dereference(): Type
            +duplicate(): Type
        }

        class TypeParser [[TypeParser.html]] {
            {static} +UNKNOWN_TYPE_STRING: String
            {static} +reset(): void
            {static} +setLanguageSupplier(Supplier<Language>): void
            {static} +getLanguage(): Language
            {static} +calcQualifier(List<String>, Qualifier): Qualifier
            {static} +calcStorage(List<String>): Storage
            {static} +isStorageSpecifier(String): boolean
            {static} #isQualifierSpecifier(String): boolean
            {static} +isKnownSpecifier(String): boolean
            {static} +separate(String): List<String>
            {static} +reWrapType(Type, Type): Type
            {static} +createIgnoringAlias(String): Type
            {static} +createFrom(String, boolean): Type
        }

        class WrapState [[WrapState.html]] {
            +getDepth(): int
            +setDepth(int): void
            +isReference(): boolean
            +setReference(boolean): void
        }

        class PointerType [[PointerType.html]] {
            +PointerType(Type, PointerOrigin)
            +PointerType(Type, Type, PointerOrigin)
            +reference(PointerOrigin): PointerType
            +dereference(): Type
            +refreshNames(): void
            +duplicate(): Type
            +isArray(): boolean
            +isSimilar(Type): boolean
            +getReferenceDepth(): int
        }

        enum de.fraunhofer.aisec.cpg.graph.type.PointerType.PointerOrigin [[PointerType.PointerOrigin.html]] {
            {static} +POINTER
            {static} +ARRAY
        }

        class ObjectType [[ObjectType.html]] {
            +ObjectType(String, Storage, Qualifier, List<Type>, Modifier, boolean)
            +ObjectType(Type, List<Type>, Modifier, boolean)
            +ObjectType()
            +getRecordDeclaration(): RecordDeclaration
            +setRecordDeclaration(RecordDeclaration): void
            +reference(PointerOrigin): PointerType
            +dereference(): Type
            +duplicate(): Type
            +isSimilar(Type): boolean
        }

        enum de.fraunhofer.aisec.cpg.graph.type.ObjectType.Modifier [[ObjectType.Modifier.html]] {
            {static} +SIGNED
            {static} +UNSIGNED
            {static} +NOT_APPLICABLE
        }

        abstract class Type [[Type.html]] {
            {static} +UNKNOWN_TYPE_STRING: String
            +Type()
            +Type(String)
            +Type(Type)
            +Type(String, Storage, Qualifier)
            {abstract} +reference(PointerOrigin): Type
            {abstract} +dereference(): Type
            +refreshNames(): void
            {abstract} +duplicate(): Type
            +getTypeName(): String
            +getReferenceDepth(): int
            +setAdditionalTypeKeywords(String): void
            +isFirstOrderType(): boolean
            +isSimilar(Type): boolean
        }

        enum de.fraunhofer.aisec.cpg.graph.type.Type.Storage [[Type.Storage.html]] {
            {static} +AUTO
            {static} +EXTERN
            {static} +STATIC
            {static} +REGISTER
        }

        enum de.fraunhofer.aisec.cpg.graph.type.Type.Origin [[Type.Origin.html]] {
            {static} +RESOLVED
            {static} +DATAFLOW
            {static} +GUESSED
            {static} +UNRESOLVED
        }

        class de.fraunhofer.aisec.cpg.graph.type.Type.Qualifier [[Type.Qualifier.html]] {
            +Qualifier(boolean, boolean, boolean, boolean)
            +Qualifier()
            +isConst(): boolean
            +setConst(boolean): void
            +isVolatile(): boolean
            +setVolatile(boolean): void
            +isRestrict(): boolean
            +setRestrict(boolean): void
            +isAtomic(): boolean
            +setAtomic(boolean): void
        }

        class ReferenceType [[ReferenceType.html]] {
            +ReferenceType(Type)
            +ReferenceType(Type, Type)
            +ReferenceType(Storage, Qualifier, Type)
            +reference(PointerOrigin): Type
            +dereference(): Type
            +duplicate(): Type
            +isSimilar(Type): boolean
            +refreshName(): void
        }

        class FunctionPointerType [[FunctionPointerType.html]] {
            +FunctionPointerType(Qualifier, Storage, List<Type>, Type)
            +FunctionPointerType(Type, List<Type>, Type)
            +reference(PointerOrigin): PointerType
            +dereference(): Type
            +duplicate(): Type
            +isSimilar(Type): boolean
        }

        class IncompleteType [[IncompleteType.html]] {
            +IncompleteType()
            +IncompleteType(Type)
            +reference(PointerOrigin): Type
            +dereference(): Type
            +duplicate(): Type
        }

        org.neo4j.ogm.typeconversion.CompositeAttributeConverter <|.. QualifierConverter
        SecondOrderType - -> Type: elementType
        Type <|- - UnknownType
        UnknownType - -> UnknownType: unknownType
        UnknownType - -> de.fraunhofer.aisec.cpg.graph.type.Type.Storage: storage
        UnknownType - -> de.fraunhofer.aisec.cpg.graph.type.Type.Qualifier: qualifier
        UnknownType - -> de.fraunhofer.aisec.cpg.graph.type.Type.Origin: typeOrigin
        WrapState - -> de.fraunhofer.aisec.cpg.graph.type.PointerType.PointerOrigin: pointerOrigin
        WrapState - -> ReferenceType: referenceType
        Type <|- - PointerType
        SecondOrderType <|.. PointerType
        PointerType - -> de.fraunhofer.aisec.cpg.graph.type.PointerType.PointerOrigin: pointerOrigin
        PointerType - -> Type: elementType
        PointerType +- - de.fraunhofer.aisec.cpg.graph.type.PointerType.PointerOrigin
        Type <|- - ObjectType
        ObjectType - -> "*" Type: generics
        ObjectType +- - de.fraunhofer.aisec.cpg.graph.type.ObjectType.Modifier
        de.fraunhofer.aisec.cpg.graph.Node <|- - Type
        Type - -> de.fraunhofer.aisec.cpg.graph.type.Type.Storage: storage
        Type - -> de.fraunhofer.aisec.cpg.graph.type.Type.Qualifier: qualifier
        Type - -> de.fraunhofer.aisec.cpg.graph.type.Type.Origin: origin\ntypeOrigin
        Type - -> Type: root
        Type +- - de.fraunhofer.aisec.cpg.graph.type.Type.Storage
        Type +- - de.fraunhofer.aisec.cpg.graph.type.Type.Origin
        Type +- - de.fraunhofer.aisec.cpg.graph.type.Type.Qualifier
        Type <|- - ReferenceType
        SecondOrderType <|.. ReferenceType
        ReferenceType - -> Type: elementType
        Type <|- - FunctionPointerType
        FunctionPointerType - -> "*" Type: parameters
        FunctionPointerType - -> Type: returnType
        Type <|- - IncompleteType
    }

    namespace org.neo4j.ogm.typeconversion {
        interface CompositeAttributeConverter<T> {
            {abstract} +toGraphProperties(T): Map<String, ?>
            {abstract} +toEntityAttribute(Map<String, ?>): T
        }
    }

    namespace de.fraunhofer.aisec.cpg.graph {
        class Node [[../Node.html]] {
            {static} +TO_STRING_STYLE: ToStringStyle
            {static} #log: Logger
            {static} +EMPTY_NAME: String
            #name: String
            #code: String
            #comment: String
            #location: PhysicalLocation
            #file: String
            #prevEOG: List<Node>
            #nextEOG: List<Node>
            #nextCFG: List<Node>
            #prevDFG: Set<Node>
            #nextDFG: Set<Node>
            #typedefs: Set<TypedefDeclaration>
            #dummy: boolean
            #implicit: boolean
        }
    }

    center footer UMLDoclet 2.0.9, PlantUML 1.2020.08
@enduml

PlantUML version 1.2020.08(Sun Apr 26 14:08:22 UTC 2020)
(APACHE source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.7+10-LTS
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>