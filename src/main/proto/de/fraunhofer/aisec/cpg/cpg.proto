syntax = "proto3";
package ast_tree;

option go_package = "github.com/Fraunhofer-AISEC/cpg-rpc/proto;proto";
option java_package = "de.fraunhofer.aisec.cpg.frontends.grpc.messages";
option java_multiple_files = true;

// Using this guide (except for the 80 chars/line):
// https://developers.google.com/protocol-buffers/docs/style#packages

// Currently only supports one file
// TODO: Sort the file

service TransferCpg {
	rpc GetCpg (CpgRequest) returns (CpgResponse);
}

message CpgRequest {
  string filename = 1;
}

message CpgResponse {
  repeated Node nodes = 1;

  // TODO: Add repeated keyword
  NodeIndex translation_unit_declaration = 2;
}

// A NodeIndex is the index of a specifig node in the repeated
// Node field in the CpgResponse Message
message NodeIndex {
  uint32 index = 1;
}

message Node {
  // Filename
  string name = 2;
  string code = 3;
  string comment = 4;
  string file = 5;
  
  // TODO: PhysicalLocation, dummy, implicit, etc.

  // The actual node
  oneof node {
    Annotation annotation = 6;
    Declaration declaration = 7;
    Statement statement = 8;
    Type type = 9;
  }
}

message Annotation {
  // TODO
}

message Declaration {
  oneof declaration {
    ValueDeclaration value_declaration = 1;
    TranslationUnitDeclaration translation_unit_declaration = 2;
    NamespaceDeclaration namespace_declaration = 3;
    // TODO
  };
}

message TranslationUnitDeclaration {  
  repeated NodeIndex declarations = 1;
  repeated NodeIndex includes = 2;
  repeated NodeIndex namespaces = 3;
}

message ValueDeclaration {
  NodeIndex type = 1;
  repeated NodeIndex possible_sub_types = 2;

  oneof value_declaration {
    VariableDeclaration variable_declaration = 3;
    FunctionDeclaration function_declaration = 4;
    // TODO
  }
}

message VariableDeclaration {
  NodeIndex initializer = 1;
  bool implicit_initializer_allowed = 2;
  bool is_array = 3;
}

message NamespaceDeclaration {
  repeated NodeIndex declarations = 1;
}

message FunctionDeclaration {
  NodeIndex body = 1;
}

message Statement {
  // TODO
  oneof statement {
    CompoundStatement compoundStatement = 1;
    ReturnStatement returnStatement = 2;
    Expression expression = 3;
  }
}

message CompoundStatement {
  repeated NodeIndex statements = 1;
}

message ReturnStatement {
  NodeIndex expression = 1;
}

message Expression {
  NodeIndex type = 1;
  repeated NodeIndex possibleSubtypes = 2;
}

message Type {
  repeated NodeIndex super_types = 1;
  Storage storage = 2;
  Origin origin = 3;
  Qualifier qualifier = 4;

  oneof type {
    // TODO
    ObjectType objectType = 7;
  }

  enum Storage {
    AUTO = 0;
    EXTERN = 1;
    STATIC = 2;
    REGISTER = 3;
  }
  enum Origin {
    RESOLVED = 0;
    DATAFLOW = 1;
    GUESSED = 2;
    UNRESOLVED = 3;
  }
  message Qualifier {
    bool is_const = 1;
    bool is_Volatile = 2;
    bool is_restrict = 3;
    bool is_atomic = 4;
  }
}

message ObjectType {
  bool primitive = 1;
  Modifier modifier = 2;
  // TODO

  enum Modifier {
    SIGNED = 0;
    UNSIGNED = 1;
    NOT_APPLICABLE = 3;
  }
}
